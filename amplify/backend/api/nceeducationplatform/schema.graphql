type StudentProfile 
  @model 
  @auth(rules: [{ allow: public }]) 
{
  id: ID!
  cognitoUserID: ID! @index
  name: String!
  email: AWSEmail!
  birthdate: AWSDate!
  courseEnrollments: [CourseEnrollment] @hasMany(indexName: "byStudent", fields: ["id"])
}

type CourseProfile 
  @model 
  @auth(rules: [{ allow: public }]) 
{
  id: ID!
  title: String!
  description: String
  courseEnrollments: [CourseEnrollment] @hasMany(indexName: "byCourse", fields: ["id"])
}

type CourseEnrollment 
  @model 
  @auth(rules: [{ allow: public }])
{
  id: ID!
  studentProfileID: ID! @index(name: "byStudent", sortKeyFields: ["id"])
  courseProfileID: ID! @index(name: "byCourse", sortKeyFields: ["id"])
  studentProfile: StudentProfile! @belongsTo(fields: ["studentProfileID"])
  courseProfile: CourseProfile! @belongsTo(fields: ["courseProfileID"])
  enrollmentDate: AWSDateTime
  progress: Progress
  state: CourseState
}

type UserSettings @model @auth(rules: [{ allow: public }]) {
  id: ID!
  notificationsEnabled: Boolean!
  darkModeEnabled: Boolean!
  language: String!
  isAdmin: Boolean!
}


enum Progress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum CourseState {
  ACTIVE
  PAUSED
  COMPLETED
}