# BEGIN STUDENT PROFILE AND SETTINGS SCHEMA DEFINITIONS

type NCEStudentProfile 
  @model 
  @auth(rules: [
    { allow: owner}
  ]){
  id: ID!
  name: String!
  email: AWSEmail!
  birthdate: AWSDate!
}

type NCEUserSettings 
  @model 
  @auth(rules: [
    { allow: owner }
    { allow: groups, groups: ["Admins"], operations: [create, update, read, delete] }
  ]){
  id: ID!
  notificationsEnabled: Boolean!
  darkModeEnabled: Boolean!
  language: String!
  isAdmin: Boolean!
}

# BEGIN NOTIFICATION SCHEMA DEFINITIONS

type BroadcastNotification 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, read, delete] }
  { allow: private, operations: [read] }
]){
  id: ID!
  targetStudent: String!
  title: String!
  message: String!
  createdAt: AWSDateTime!
  type: NotificationType!
  redirect: String
}

type UserNotificationRead 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, read, delete] }
  { allow: owner, operations: [create, read, update] }
]){
  id: ID!
  notificationID: ID!
  readAt: AWSDateTime
}

enum NotificationType {
  MESSAGE
  ALERT
  REMINDER
}

# BEGIN COURSE SCHEMA DEFINITIONS

type Course 
@model
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  description: String
  subject: CourseSubject!
  difficulty: String
  creator: ID! @index
  modules: [Module] @hasMany
}

type Module 
@model 
@auth(rules:[
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  description: String
  courseID: ID! @index(name: "byCourse", sortKeyFields: ["id"])
  course: Course! @belongsTo(fields: ["courseID"])
  lessons: [Lesson] @hasMany
}

type Lesson 
@model 
@auth(rules:[
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  content: AWSJSON # Use AWSJSON for complex content structures
  videoURL: String
  moduleID: ID! @index(name: "byModule", sortKeyFields: ["id"])
  #module: Module! @belongsTo(fields: ["moduleID"])
  #quizzes: [Quiz] @hasMany
  #exercises: [Exercise] @hasMany # STEM-specific interactive exercises
}

enum CourseSubject {
  MATH
  COMPUTER_SCIENCE
}

enum ExerciseType {
  CODING
  PROBLEM_SOLVING
}
