# BEGIN STUDENT PROFILE AND SETTINGS SCHEMA DEFINITIONS

type StudentProfile 
@model
@auth(rules: [
  { allow: owner}
  { allow: groups, groups: ["Admins"], operations: [create, update, read, delete] }
  { allow: groups, groups: ["Students"], operations: [ read ] }
]){
  id: ID!
  name: String!
  email: AWSEmail!
  status: StudentStatus!
  notificationsEnabled: Boolean!
  darkModeEnabled: Boolean!
  language: String!
  isAdmin: Boolean!
}

# BEGIN NOTIFICATION SCHEMA DEFINITIONS

type BroadcastNotification 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, read, delete] }
  { allow: groups, groups: ["Students"], operations: [update, read] }
]){
  id: ID!
  targetStudent: String
  title: String!
  message: String!
  createdAt: AWSDateTime!
  type: NotificationType!
  redirect: String
}

type UserNotificationRead 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, read, delete] }
  { allow: groups, groups: ["Students"], operations: [create, read, update] }
]){
  id: ID!
  notificationID: ID!
  readAt: AWSDateTime
  readBy: ID!
}

enum NotificationType {
  MESSAGE
  ALERT
  REMINDER
}

enum StudentStatus {
  ACTIVE
  INACTIVE
}

# BEGIN COURSE SCHEMA DEFINITIONS

type Course 
@model
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  description: String
  subject: CourseSubject!
  difficulty: String
  creator: ID! @index
  modules: [Module] @hasMany
}

type Module 
@model 
@auth(rules:[
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  description: String
  courseID: ID! @index(name: "byCourse", sortKeyFields: ["id"])
  course: Course! @belongsTo(fields: ["courseID"])
  lessons: [Lesson] @hasMany
}

type Lesson 
@model 
@auth(rules:[
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  content: AWSJSON # Use AWSJSON for complex content structures
  videoURL: String
  moduleID: ID! @index(name: "byModule", sortKeyFields: ["id"])
  module: Module! @belongsTo(fields: ["moduleID"])
  quizzes: [Quiz] @hasMany
  exercises: [Exercise] @hasMany # STEM-specific interactive exercises
}

type Exercise 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  question: String!
  solution: String
  lessonID: ID! @index(name: "byLesson", sortKeyFields: ["id"])
  lesson: Lesson! @belongsTo(fields: ["lessonID"])
  exerciseType: ExerciseType!
  data: AWSJSON # For dynamic content or problem parameters
}

type Quiz 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  lessonID: ID! @index(name: "byLesson", sortKeyFields: ["id"])
  lesson: Lesson! @belongsTo(fields: ["lessonID"])
  questions: [Question] @hasMany
}

type Question 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  text: String!
  options: AWSJSON # Multiple-choice options
  correctAnswer: String!
  quizID: ID! @index(name: "byQuiz", sortKeyFields: ["id"])
  quiz: Quiz! @belongsTo(fields: ["quizID"])
}

type Enrollment 
@model 
@auth(rules: [
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  userID: ID!
  courseID: ID!
  progress: Float
  completed: Boolean
  achievements: [String]
}

enum CourseSubject {
  MATH
  COMPUTER_SCIENCE
}

enum ExerciseType {
  CODING
  PROBLEM_SOLVING
}

# BEGIN INSTRUCTOR SCHEMA DEFINITIONS

type InstructorProfile @model
@auth(rules: [
  { allow: owner}
  { allow: groups, groups: ["Admins"], operations: [create, update, read, delete] }
  { allow: groups, groups: ["Students"], operations: [ read ] }
  { allow: groups, groups: ["Instructors"], operations: [ read ] }
]){
  id: ID!
  name: String!
  email: AWSEmail!
  biography: InstructorBiography!
  contact: InstructorContact!
}

type InstructorContact @model
@auth(rules: [
  { allow: owner }
  { allow: groups, groups: ["Students"], operations: [ read ] }
  { allow: groups, groups: ["Instructors"], operations: [ read ] }
]){
  id: ID!
  phone: String
  email: String
}

type InstructorBiography @model
@auth(rules: [
  { allow: owner }
  { allow: groups, groups: ["Students"], operations: [ read ] }
  { allow: groups, groups: ["Instructors"], operations: [ read ] }
]){
  id: ID!
  overview: String!
  professionalExperience: [Experience] @hasMany
  awards: [Award] @hasMany
}

type Experience @model
@auth(rules: [
  { allow: owner }
  { allow: groups, groups: ["Students"], operations: [ read ] }
  { allow: groups, groups: ["Instructors"], operations: [ read ] }
]){
  id: ID!
  startDate: String!
  endDate: String
  isCurrent: Boolean!
  companyName: String!
  jobTitle: String!
  description: String!
}

type Award @model
@auth(rules: [
  { allow: owner }
  { allow: groups, groups: ["Students"], operations: [ read ] }
  { allow: groups, groups: ["Instructors"], operations: [ read ] }
]){
  id: ID!
  awardDate: String!
  awardSource: String!
  description: String!
}