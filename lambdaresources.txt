
type Module 
@model 
@auth(rules:[
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  description: String
  courseID: ID! @index(name: "byCourse", sortKeyFields: ["id"])
  course: Course! @belongsTo(fields: ["courseID"])
  lessons: [Lesson] @hasMany
}

type Lesson 
@model 
@auth(rules:[
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  content: AWSJSON # Use AWSJSON for complex content structures
  videoURL: String
  moduleID: ID! @index(name: "byModule", sortKeyFields: ["id"])
  module: Module! @belongsTo(fields: ["moduleID"])
  quizzes: [Quiz] @hasMany
  exercises: [Exercise] @hasMany # STEM-specific interactive exercises
}

type Exercise 
@model 
@auth([
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  question: String!
  solution: String
  lessonID: ID! @index(name: "byLesson", sortKeyFields: ["id"])
  lesson: Lesson! @belongsTo(fields: ["lessonID"])
  exerciseType: ExerciseType!
  data: AWSJSON # For dynamic content or problem parameters
}

type Quiz 
@model 
@auth([
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  title: String!
  lessonID: ID! @index(name: "byLesson", sortKeyFields: ["id"])
  lesson: Lesson! @belongsTo(fields: ["lessonID"])
  questions: [Question] @hasMany
}

type Question 
@model 
@auth([
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  text: String!
  options: AWSJSON # Multiple-choice options
  correctAnswer: String!
  quizID: ID! @index(name: "byQuiz", sortKeyFields: ["id"])
  quiz: Quiz! @belongsTo(fields: ["quizID"])
}

type Enrollment 
@model 
@auth([
  { allow: groups, groups: ["Admins"], operations: [create, update, delete, read] }
  { allow: groups, groups: ["Instructors"], operations: [create, update, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]){
  id: ID!
  userID: ID!
  courseID: ID!
  progress: Float
  completed: Boolean
  achievements: [String] # Badges or certificates earned
}

enum CourseSubject {
  MATH
  COMPUTER_SCIENCE
}

enum ExerciseType {
  CODING
  PROBLEM_SOLVING
}

